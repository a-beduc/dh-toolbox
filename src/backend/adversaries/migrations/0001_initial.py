# Generated by Django 5.2.7 on 2025-10-14 23:57

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AdversaryTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('PAS', 'PASSIVE'), ('ACT', 'ACTION'), ('REA', 'REACTION')], max_length=3)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tactic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DamageProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dice_number', models.PositiveSmallIntegerField(default=0, help_text='0 dice means flat damage', validators=[django.core.validators.MinValueValidator(0)])),
                ('dice_type', models.PositiveSmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('bonus', models.SmallIntegerField(default=0)),
                ('damage_type', models.CharField(choices=[('PHY', 'PHYSICAL'), ('MAG', 'MAGICAL'), ('BTH', 'BOTH')], default='PHY', max_length=3)),
            ],
            options={
                'constraints': [models.CheckConstraint(condition=models.Q(models.Q(('dice_number', 0), ('dice_type', 0), ('bonus__gte', 0)), models.Q(('dice_number__gte', 1), ('dice_type__gte', 2)), _connector='OR'), name='dp_valid_shape'), models.UniqueConstraint(fields=('dice_number', 'dice_type', 'bonus', 'damage_type'), name='damage_profile_entity')],
            },
        ),
        migrations.CreateModel(
            name='BasicAttack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('range', models.CharField(choices=[('MEL', 'MELEE'), ('VCL', 'VERY CLOSE'), ('CLO', 'CLOSE'), ('FAR', 'Far'), ('VFA', 'VERY FAR')], default='MEL', max_length=3)),
                ('damage', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='basic_attack', to='adversaries.damageprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Experience',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('bonus', models.SmallIntegerField()),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('name', 'bonus'), name='experience_entity')],
            },
        ),
        migrations.CreateModel(
            name='Adversary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('tier', models.PositiveSmallIntegerField(choices=[(1, 'I'), (2, 'II'), (3, 'III'), (4, 'IV')], default=1)),
                ('type', models.CharField(choices=[('BRU', 'BRUISER'), ('HOR', 'HORDE'), ('LEA', 'LEADER'), ('MIN', 'MINION'), ('RAN', 'RANGED'), ('SKU', 'SKULK'), ('SOC', 'SOCIAL'), ('SOL', 'SOLO'), ('STA', 'STANDARD'), ('SUP', 'SUPPORT')], default='STA', max_length=3)),
                ('description', models.TextField(blank=True, null=True)),
                ('difficulty', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('threshold_major', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('threshold_severe', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('hit_point', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('horde_hit_point', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('stress_point', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('atk_bonus', models.SmallIntegerField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=200, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('DRA', 'DRAFT'), ('PUB', 'PUBLISHED')], db_index=True, default='DRA', max_length=3)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='adversaries.adversarytag')),
                ('basic_attack', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='adversaries.basicattack')),
                ('experiences', models.ManyToManyField(blank=True, to='adversaries.experience')),
                ('features', models.ManyToManyField(blank=True, to='adversaries.feature')),
                ('tactics', models.ManyToManyField(blank=True, to='adversaries.tactic')),
            ],
        ),
        migrations.AddConstraint(
            model_name='basicattack',
            constraint=models.UniqueConstraint(fields=('name', 'range', 'damage'), name='basic_attack_entity'),
        ),
        migrations.AddIndex(
            model_name='adversary',
            index=models.Index(fields=['name'], name='adversaries_name_67125c_idx'),
        ),
        migrations.AddIndex(
            model_name='adversary',
            index=models.Index(fields=['type', 'tier'], name='adversaries_type_dcaeb4_idx'),
        ),
        migrations.AddIndex(
            model_name='adversary',
            index=models.Index(fields=['status'], name='adversaries_status_26bf76_idx'),
        ),
        migrations.AddConstraint(
            model_name='adversary',
            constraint=models.UniqueConstraint(fields=('author', 'name'), name='unique_author_name'),
        ),
        migrations.AddConstraint(
            model_name='adversary',
            constraint=models.CheckConstraint(condition=models.Q(('name', ''), _negated=True), name='adversary_name_not_empty'),
        ),
    ]
